import { jsx as _jsx } from "react/jsx-runtime";
import * as React from "react";
function _array_like_to_array(arr, len) {
  (len == null || len > arr.length) && (len = arr.length);
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
function _array_without_holes(arr) {
  if (Array.isArray(arr))
    return _array_like_to_array(arr);
}
function _define_property(obj, key, value) {
  return key in obj ? Object.defineProperty(obj, key, {
    value,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : obj[key] = value, obj;
}
function _iterable_to_array(iter) {
  if (typeof Symbol < "u" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
    return Array.from(iter);
}
function _non_iterable_spread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _object_spread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {}, ownKeys2 = Object.keys(source);
    typeof Object.getOwnPropertySymbols == "function" && (ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
      return Object.getOwnPropertyDescriptor(source, sym).enumerable;
    }))), ownKeys2.forEach(function(key) {
      _define_property(target, key, source[key]);
    });
  }
  return target;
}
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _object_spread_props(target, source) {
  return source = source ?? {}, Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
    Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
  }), target;
}
function _object_without_properties(source, excluded) {
  if (source == null)
    return {};
  var target = _object_without_properties_loose(source, excluded), key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++)
      key = sourceSymbolKeys[i], !(excluded.indexOf(key) >= 0) && Object.prototype.propertyIsEnumerable.call(source, key) && (target[key] = source[key]);
  }
  return target;
}
function _object_without_properties_loose(source, excluded) {
  if (source == null)
    return {};
  var target = {}, sourceKeys = Object.keys(source), key, i;
  for (i = 0; i < sourceKeys.length; i++)
    key = sourceKeys[i], !(excluded.indexOf(key) >= 0) && (target[key] = source[key]);
  return target;
}
function _to_consumable_array(arr) {
  return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();
}
function _unsupported_iterable_to_array(o, minLen) {
  if (o) {
    if (typeof o == "string")
      return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor && (n = o.constructor.name), n === "Map" || n === "Set")
      return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
      return _array_like_to_array(o, minLen);
  }
}
function createContext(rootComponentName, defaultContext) {
  var Context = /* @__PURE__ */ React.createContext(defaultContext);
  function Provider(props) {
    var children = props.children, context = _object_without_properties(props, [
      "children"
    ]), value = React.useMemo(function() {
      return context;
    }, Object.values(context));
    return /* @__PURE__ */ _jsx(Context.Provider, {
      value,
      children
    });
  }
  function useContext(consumerName) {
    var context = React.useContext(Context);
    if (context)
      return context;
    if (defaultContext !== void 0)
      return defaultContext;
    throw new Error("`".concat(consumerName, "` must be used within `").concat(rootComponentName, "`"));
  }
  return Provider.displayName = "".concat(rootComponentName, "Provider"), [
    Provider,
    useContext
  ];
}
function createContextScope(scopeName) {
  var createContextScopeDeps = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [], defaultContexts = [];
  function createContext2(rootComponentName, defaultContext) {
    var BaseContext = /* @__PURE__ */ React.createContext(defaultContext), index = defaultContexts.length;
    defaultContexts = _to_consumable_array(defaultContexts).concat([
      defaultContext
    ]);
    function Provider(props) {
      var _scope_scopeName, scope = props.scope, children = props.children, context = _object_without_properties(props, [
        "scope",
        "children"
      ]), Context = (scope == null || (_scope_scopeName = scope[scopeName]) === null || _scope_scopeName === void 0 ? void 0 : _scope_scopeName[index]) || BaseContext, value = React.useMemo(function() {
        return context;
      }, Object.values(context));
      return /* @__PURE__ */ _jsx(Context.Provider, {
        value,
        children
      });
    }
    function useContext(consumerName, scope, options) {
      var _scope_scopeName, Context = (scope == null || (_scope_scopeName = scope[scopeName]) === null || _scope_scopeName === void 0 ? void 0 : _scope_scopeName[index]) || BaseContext, context = React.useContext(Context);
      if (context)
        return context;
      if (defaultContext !== void 0)
        return defaultContext;
      var missingContextMessage = "`".concat(consumerName, "` must be used within `").concat(rootComponentName, "`");
      if (options != null && options.fallback)
        return (options == null ? void 0 : options.warn) !== !1 && console.warn(missingContextMessage), options.fallback;
      throw new Error(missingContextMessage);
    }
    return Provider.displayName = "".concat(rootComponentName, "Provider"), [
      Provider,
      useContext
    ];
  }
  var createScope = function() {
    var scopeContexts = defaultContexts.map(function(defaultContext) {
      return /* @__PURE__ */ React.createContext(defaultContext);
    });
    return function(scope) {
      var contexts = (scope == null ? void 0 : scope[scopeName]) || scopeContexts;
      return React.useMemo(function() {
        return _define_property({}, "__scope".concat(scopeName), _object_spread_props(_object_spread({}, scope), _define_property({}, scopeName, contexts)));
      }, [
        scope,
        contexts
      ]);
    };
  };
  return createScope.scopeName = scopeName, [
    createContext2,
    composeContextScopes.apply(void 0, [
      createScope
    ].concat(_to_consumable_array(createContextScopeDeps)))
  ];
}
function composeContextScopes() {
  for (var _len = arguments.length, scopes = new Array(_len), _key = 0; _key < _len; _key++)
    scopes[_key] = arguments[_key];
  var baseScope = scopes[0];
  if (scopes.length === 1)
    return baseScope;
  var createScope = function() {
    var scopeHooks = scopes.map(function(createScope2) {
      return {
        useScope: createScope2(),
        scopeName: createScope2.scopeName
      };
    });
    return function(overrideScopes) {
      var nextScopes = scopeHooks.reduce(function(nextScopes2, param) {
        var useScope = param.useScope, scopeName = param.scopeName, scopeProps = useScope(overrideScopes), currentScope = scopeProps["__scope".concat(scopeName)];
        return _object_spread({}, nextScopes2, currentScope);
      }, {});
      return React.useMemo(function() {
        return _define_property({}, "__scope".concat(baseScope.scopeName), nextScopes);
      }, [
        nextScopes
      ]);
    };
  };
  return createScope.scopeName = baseScope.scopeName, createScope;
}
export {
  createContext,
  createContextScope
};
//# sourceMappingURL=create-context.js.map
