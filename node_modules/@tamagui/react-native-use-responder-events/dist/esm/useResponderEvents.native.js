import * as React from "react";
import * as ResponderSystem from "./ResponderSystem";
export * from "./utils";
var emptyObject = {};
function useResponderEvents(hostRef) {
  var config = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : emptyObject, id = React.useId(), isAttachedRef = React.useRef(!1);
  React.useEffect(function() {
    return ResponderSystem.attachListeners(), function() {
      ResponderSystem.removeNode(id);
    };
  }, [
    id
  ]), React.useEffect(function() {
    var onMoveShouldSetResponder = config.onMoveShouldSetResponder, onMoveShouldSetResponderCapture = config.onMoveShouldSetResponderCapture, onScrollShouldSetResponder = config.onScrollShouldSetResponder, onScrollShouldSetResponderCapture = config.onScrollShouldSetResponderCapture, onSelectionChangeShouldSetResponder = config.onSelectionChangeShouldSetResponder, onSelectionChangeShouldSetResponderCapture = config.onSelectionChangeShouldSetResponderCapture, onStartShouldSetResponder = config.onStartShouldSetResponder, onStartShouldSetResponderCapture = config.onStartShouldSetResponderCapture, requiresResponderSystem = onMoveShouldSetResponder != null || onMoveShouldSetResponderCapture != null || onScrollShouldSetResponder != null || onScrollShouldSetResponderCapture != null || onSelectionChangeShouldSetResponder != null || onSelectionChangeShouldSetResponderCapture != null || onStartShouldSetResponder != null || onStartShouldSetResponderCapture != null, node = hostRef.current;
    requiresResponderSystem ? (ResponderSystem.addNode(id, node, config), isAttachedRef.current = !0) : isAttachedRef.current && (ResponderSystem.removeNode(id), isAttachedRef.current = !1);
  }, [
    config,
    hostRef,
    id
  ]), process.env.NODE_ENV === "development" && (React.useDebugValue({
    isResponder: hostRef.current === ResponderSystem.getResponderNode()
  }), React.useDebugValue(config));
}
export {
  useResponderEvents
};
//# sourceMappingURL=useResponderEvents.js.map
