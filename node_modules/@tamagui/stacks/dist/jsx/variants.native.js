import { getElevation } from "./getElevation";
function _define_property(obj, key, value) {
  return key in obj ? Object.defineProperty(obj, key, {
    value,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : obj[key] = value, obj;
}
function _object_spread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {}, ownKeys2 = Object.keys(source);
    typeof Object.getOwnPropertySymbols == "function" && (ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
      return Object.getOwnPropertyDescriptor(source, sym).enumerable;
    }))), ownKeys2.forEach(function(key) {
      _define_property(target, key, source[key]);
    });
  }
  return target;
}
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _object_spread_props(target, source) {
  return source = source ?? {}, Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
    Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
  }), target;
}
var elevate = {
  true: function(_, extras) {
    return getElevation(extras.props.size, extras);
  }
}, bordered = function(val, param) {
  var props = param.props;
  return _object_spread({
    // TODO size it with size in '...size'
    borderWidth: typeof val == "number" ? val : 1,
    borderColor: "$borderColor"
  }, props.hoverTheme && {
    hoverStyle: {
      borderColor: "$borderColorHover"
    }
  }, props.pressTheme && {
    pressStyle: {
      borderColor: "$borderColorPress"
    }
  }, props.focusTheme && {
    focusStyle: {
      borderColor: "$borderColorFocus"
    }
  });
}, padded = {
  true: function(_, extras) {
    var tokens = extras.tokens, props = extras.props;
    return {
      padding: tokens.space[props.size] || tokens.space.$true
    };
  }
}, radiused = {
  true: function(_, extras) {
    var tokens = extras.tokens, props = extras.props;
    return {
      borderRadius: tokens.radius[props.size] || tokens.radius.$true
    };
  }
}, circularStyle = {
  borderRadius: 1e5,
  padding: 0
}, circular = {
  true: function(_, param) {
    var props = param.props, tokens = param.tokens;
    if (!("size" in props))
      return circularStyle;
    var size = typeof props.size == "number" ? props.size : tokens.size[props.size];
    return _object_spread_props(_object_spread({}, circularStyle), {
      width: size,
      height: size,
      maxWidth: size,
      maxHeight: size,
      minWidth: size,
      minHeight: size
    });
  }
}, hoverTheme = {
  true: {
    hoverStyle: {
      backgroundColor: "$backgroundHover",
      borderColor: "$borderColorHover"
    }
  },
  false: {}
}, pressTheme = {
  true: {
    cursor: "pointer",
    pressStyle: {
      backgroundColor: "$backgroundPress",
      borderColor: "$borderColorPress"
    }
  },
  false: {}
}, focusTheme = {
  true: {
    focusStyle: {
      backgroundColor: "$backgroundFocus",
      borderColor: "$borderColorFocus"
    }
  },
  false: {}
};
export {
  bordered,
  circular,
  elevate,
  focusTheme,
  hoverTheme,
  padded,
  pressTheme,
  radiused
};
//# sourceMappingURL=variants.js.map
