import { isWeb } from "@tamagui/constants";
import { stylePropsAll, stylePropsUnitless } from "@tamagui/helpers";
import { getAllSelectors } from "./insertStyleRule";
function _define_property(obj, key, value) {
  return key in obj ? Object.defineProperty(obj, key, {
    value,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : obj[key] = value, obj;
}
function _object_spread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {}, ownKeys2 = Object.keys(source);
    typeof Object.getOwnPropertySymbols == "function" && (ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
      return Object.getOwnPropertyDescriptor(source, sym).enumerable;
    }))), ownKeys2.forEach(function(key) {
      _define_property(target, key, source[key]);
    });
  }
  return target;
}
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _object_spread_props(target, source) {
  return source = source ?? {}, Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
    Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
  }), target;
}
var stylePropsAllPlusTransforms = _object_spread_props(_object_spread({}, stylePropsAll), {
  translateX: !0,
  translateY: !0
});
function normalizeValueWithProperty(value) {
  var property = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
  if (!isWeb || stylePropsUnitless[property] || property && !stylePropsAllPlusTransforms[property] || typeof value == "boolean")
    return value;
  var res = value;
  return value && typeof value == "object" ? value : (typeof value == "number" ? res = "".concat(value, "px") : property && (res = "".concat(res)), res);
}
var rcache = {};
function reverseMapClassNameToValue(key, className) {
  var selectors = getAllSelectors(), cssRule = selectors[className];
  if (rcache[cssRule])
    return rcache[cssRule];
  if (!cssRule) {
    process.env.NODE_ENV === "development" && console.warn("No CSS rule found for ".concat(key, ' looking for selector ".').concat(className, '", you may not be injecting extracted CSS'));
    return;
  }
  var cssVal = cssRule.replace(/.*:/, "").replace(/;.*/, "").trim(), res;
  return cssVal.startsWith("var(") ? res = cssVal : stylePropsUnitless[key] ? res = +cssVal : cssVal.endsWith("px") ? res = +cssVal.replace("px", "") : res = cssVal, rcache[cssRule] = res, process.env.NODE_ENV === "development" && typeof res == "number" && Number.isNaN(res) && console.info("Tamagui invalid parsed value, NaN:", {
    res,
    cssVal,
    cssRule,
    key,
    className
  }), res;
}
export {
  normalizeValueWithProperty,
  reverseMapClassNameToValue
};
//# sourceMappingURL=normalizeValueWithProperty.js.map
