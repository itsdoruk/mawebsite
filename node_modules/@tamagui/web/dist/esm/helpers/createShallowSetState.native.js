function _define_property(obj, key, value) {
  return key in obj ? Object.defineProperty(obj, key, {
    value,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : obj[key] = value, obj;
}
function _object_spread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {}, ownKeys = Object.keys(source);
    typeof Object.getOwnPropertySymbols == "function" && (ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
      return Object.getOwnPropertyDescriptor(source, sym).enumerable;
    }))), ownKeys.forEach(function(key) {
      _define_property(target, key, source[key]);
    });
  }
  return target;
}
function createShallowSetState(setter, debug) {
  return function(next) {
    return setter(function(prev) {
      return mergeIfNotShallowEqual(prev, next, debug);
    });
  };
}
function mergeIfNotShallowEqual(prev, next, debug) {
  return isEqualShallow(prev, next) ? prev : (process.env.NODE_ENV === "development" && debug && console.warn("setStateShallow CHANGE", {
    prev,
    next
  }), _object_spread({}, prev, next));
}
function isEqualShallow(prev, next) {
  for (var key in next)
    if (prev[key] !== next[key])
      return !1;
  return !0;
}
export {
  createShallowSetState,
  isEqualShallow,
  mergeIfNotShallowEqual
};
//# sourceMappingURL=createShallowSetState.js.map
