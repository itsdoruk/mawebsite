import { isServer, isWeb } from "@tamagui/constants";
import { useRef, useSyncExternalStore } from "react";
import { getConfig } from "../config";
import { matchMedia } from "../helpers/matchMedia";
import { pseudoDescriptors } from "../helpers/pseudoDescriptors";
import { getDisableSSR } from "./useDisableSSR";
function _array_like_to_array(arr, len) {
  (len == null || len > arr.length) && (len = arr.length);
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
function _array_with_holes(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _array_without_holes(arr) {
  if (Array.isArray(arr))
    return _array_like_to_array(arr);
}
function _define_property(obj, key, value) {
  return key in obj ? Object.defineProperty(obj, key, {
    value,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : obj[key] = value, obj;
}
function _iterable_to_array(iter) {
  if (typeof Symbol < "u" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
    return Array.from(iter);
}
function _iterable_to_array_limit(arr, i) {
  var _i = arr == null ? null : typeof Symbol < "u" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i != null) {
    var _arr = [], _n = !0, _d = !1, _s, _e;
    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done) && (_arr.push(_s.value), !(i && _arr.length === i)); _n = !0)
        ;
    } catch (err) {
      _d = !0, _e = err;
    } finally {
      try {
        !_n && _i.return != null && _i.return();
      } finally {
        if (_d)
          throw _e;
      }
    }
    return _arr;
  }
}
function _non_iterable_rest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _non_iterable_spread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _object_spread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {}, ownKeys2 = Object.keys(source);
    typeof Object.getOwnPropertySymbols == "function" && (ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
      return Object.getOwnPropertyDescriptor(source, sym).enumerable;
    }))), ownKeys2.forEach(function(key) {
      _define_property(target, key, source[key]);
    });
  }
  return target;
}
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _object_spread_props(target, source) {
  return source = source ?? {}, Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
    Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
  }), target;
}
function _sliced_to_array(arr, i) {
  return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();
}
function _to_consumable_array(arr) {
  return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();
}
function _unsupported_iterable_to_array(o, minLen) {
  if (o) {
    if (typeof o == "string")
      return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor && (n = o.constructor.name), n === "Map" || n === "Set")
      return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
      return _array_like_to_array(o, minLen);
  }
}
var mediaState = (
  // development only safeguard
  process.env.NODE_ENV === "development" ? new Proxy({}, {
    get: function(target, key) {
      if (typeof key == "string" && key[0] === "$" && // dont error on $$typeof
      key[1] !== "$")
        throw new Error('Access mediaState should not use "$": '.concat(key));
      return Reflect.get(target, key);
    }
  }) : {}
), mediaQueryConfig = {}, getMedia = function() {
  return mediaState;
}, mediaKeys = /* @__PURE__ */ new Set(), isMediaKey = function(key) {
  if (mediaKeys.has(key))
    return !0;
  if (key[0] === "$") {
    if (key.startsWith("$platform-"))
      return "platform";
    if (key.startsWith("$theme-"))
      return "theme";
    if (key.startsWith("$group-"))
      return "group";
  }
  return !1;
}, initState, defaultMediaImportance = Object.keys(pseudoDescriptors).length, mediaKeysOrdered, getMediaKeyImportance = function(key) {
  if (process.env.NODE_ENV === "development" && key[0] === "$")
    throw new Error("use short key");
  var conf = getConfig();
  return conf.settings.mediaPropOrder ? defaultMediaImportance : mediaKeysOrdered.indexOf(key) + 100;
}, dispose = /* @__PURE__ */ new Set(), mediaVersion = 0, configureMedia = function(config) {
  var media = config.media, mediaQueryDefaultActive = config.mediaQueryDefaultActive;
  if (media) {
    mediaVersion++;
    for (var key in media)
      mediaState[key] = (mediaQueryDefaultActive == null ? void 0 : mediaQueryDefaultActive[key]) || !1, mediaKeys.add("$".concat(key));
    Object.assign(mediaQueryConfig, media), initState = _object_spread({}, mediaState), mediaKeysOrdered = Object.keys(media), config.disableSSR ? setupMediaListeners() : updateCurrentState();
  }
};
function unlisten() {
  dispose.forEach(function(cb) {
    return cb();
  }), dispose.clear();
}
var setupVersion = -1;
function setupMediaListeners() {
  var _loop = function(key2) {
    var update = function() {
      var next = !!getMatch().matches;
      next !== mediaState[key2] && (mediaState = _object_spread_props(_object_spread({}, mediaState), _define_property({}, key2, next)), updateCurrentState());
    }, str = mediaObjectToString(mediaQueryConfig[key2], key2), getMatch = function() {
      return matchMedia(str);
    }, match = getMatch();
    if (!match)
      throw new Error("\u26A0\uFE0F No match");
    match.addListener(update), dispose.add(function() {
      match.removeListener(update);
    }), update();
  };
  if (!(isWeb && isServer) && setupVersion !== mediaVersion) {
    setupVersion = mediaVersion, unlisten();
    for (var key in mediaQueryConfig)
      _loop(key);
  }
}
var listeners = /* @__PURE__ */ new Set(), flushing = !1, flushVersion = -1;
function updateCurrentState() {
  flushing && flushVersion === mediaVersion || (flushVersion = mediaVersion, flushing = !0, Promise.resolve().then(function() {
    flushing = !1, listeners.forEach(function(cb) {
      return cb(mediaState);
    });
  }));
}
var shouldUpdate = /* @__PURE__ */ new WeakMap();
function setMediaShouldUpdate(ref, props) {
  return shouldUpdate.set(ref, props);
}
function subscribe(subscriber) {
  return listeners.add(subscriber), function() {
    return listeners.delete(subscriber);
  };
}
function useMedia(uid, componentContext) {
  var internal = useRef(), disableSSR = getDisableSSR(componentContext), initialState = (disableSSR || !isWeb ? mediaState : initState) || {}, state = useSyncExternalStore(subscribe, function() {
    if (!internal.current)
      return initialState;
    var _internal_current = internal.current, touched = _internal_current.touched, prev = _internal_current.prev, componentState = uid ? shouldUpdate.get(uid) : void 0;
    if (componentState && componentState.enabled === !1)
      return prev;
    var _componentState_keys, testKeys = (_componentState_keys = componentState == null ? void 0 : componentState.keys) !== null && _componentState_keys !== void 0 ? _componentState_keys : (!componentState || componentState.enabled) && touched ? _to_consumable_array(touched) : null, hasntUpdated = !testKeys || (testKeys == null ? void 0 : testKeys.every(function(key) {
      return mediaState[key] === prev[key];
    }));
    return hasntUpdated ? prev : (internal.current.prev = mediaState, mediaState);
  }, function() {
    return initialState;
  });
  return new Proxy(state, {
    get: function(_, key) {
      if (typeof key == "string") {
        var _internal, _internal_current;
        (_internal = internal).current || (_internal.current = {
          prev: initialState
        }), (_internal_current = internal.current).touched || (_internal_current.touched = /* @__PURE__ */ new Set()), internal.current.touched.add(key);
      }
      return Reflect.get(state, key);
    }
  });
}
var getMediaImportanceIfMoreImportant = function(mediaKey, key, importancesUsed, isSizeMedia) {
  var conf = getConfig(), importance = isSizeMedia && !conf.settings.mediaPropOrder ? getMediaKeyImportance(mediaKey) : defaultMediaImportance;
  return !importancesUsed[key] || importance > importancesUsed[key] ? importance : null;
};
function camelToHyphen(str) {
  return str.replace(/[A-Z]/g, function(m) {
    return "-".concat(m.toLowerCase());
  }).toLowerCase();
}
var cache = /* @__PURE__ */ new WeakMap(), cachedMediaKeyToQuery = {};
function mediaObjectToString(query, key) {
  if (typeof query == "string")
    return query;
  if (cache.has(query))
    return cache.get(query);
  var res = Object.entries(query).map(function(param) {
    var _param = _sliced_to_array(param, 2), feature = _param[0], value = _param[1];
    return feature = camelToHyphen(feature), typeof value == "string" || typeof value == "number" && /[height|width]$/.test(feature) && (value = "".concat(value, "px")), "(".concat(feature, ": ").concat(value, ")");
  }).join(" and ");
  return key && (cachedMediaKeyToQuery[key] = res), cache.set(query, res), res;
}
function mediaKeyToQuery(key) {
  return cachedMediaKeyToQuery[key] || mediaObjectToString(mediaQueryConfig[key], key);
}
function mediaKeyMatch(key, dimensions) {
  var mediaQueries = mediaQueryConfig[key], result = Object.keys(mediaQueries).every(function(query) {
    var expectedVal = +mediaQueries[query], isMax = query.startsWith("max"), isWidth = query.endsWith("Width"), givenVal = dimensions[isWidth ? "width" : "height"];
    return isMax ? givenVal < expectedVal : givenVal > expectedVal;
  });
  return result;
}
export {
  configureMedia,
  getMedia,
  getMediaImportanceIfMoreImportant,
  getMediaKeyImportance,
  isMediaKey,
  mediaKeyMatch,
  mediaKeyToQuery,
  mediaKeys,
  mediaObjectToString,
  mediaQueryConfig,
  mediaState,
  setMediaShouldUpdate,
  setupMediaListeners,
  useMedia
};
//# sourceMappingURL=useMedia.js.map
