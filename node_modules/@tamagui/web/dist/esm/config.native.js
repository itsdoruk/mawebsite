import { isWeb } from "@tamagui/constants";
function _array_like_to_array(arr, len) {
  (len == null || len > arr.length) && (len = arr.length);
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
function _array_with_holes(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _iterable_to_array_limit(arr, i) {
  var _i = arr == null ? null : typeof Symbol < "u" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i != null) {
    var _arr = [], _n = !0, _d = !1, _s, _e;
    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done) && (_arr.push(_s.value), !(i && _arr.length === i)); _n = !0)
        ;
    } catch (err) {
      _d = !0, _e = err;
    } finally {
      try {
        !_n && _i.return != null && _i.return();
      } finally {
        if (_d)
          throw _e;
      }
    }
    return _arr;
  }
}
function _non_iterable_rest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _sliced_to_array(arr, i) {
  return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();
}
function _unsupported_iterable_to_array(o, minLen) {
  if (o) {
    if (typeof o == "string")
      return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor && (n = o.constructor.name), n === "Map" || n === "Set")
      return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
      return _array_like_to_array(o, minLen);
  }
}
var conf, setConfig = function(next) {
  conf = next;
}, setConfigFont = function(name, font, fontParsed) {
  if (process.env.NODE_ENV === "development" && !conf)
    throw new Error("Haven't called createTamagui yet");
  conf.fonts[name] = font, conf.fontsParsed["$".concat(name)] = fontParsed;
}, getConfig = function() {
  if (!conf)
    throw new Error(process.env.NODE_ENV !== "production" ? "Missing tamagui config, you either have a duplicate config, or haven't set it up. Be sure createTamagui is called before rendering. Also, make sure all of your tamagui dependencies are on the same version (`tamagui`, `@tamagui/package-name`, etc.) not just in your package.json, but in your lockfile." : "Err0");
  return conf;
}, tokensMerged;
function setTokens(_) {
  tokensMerged = _;
}
var getTokens = function() {
  var prefixed = (arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : (
    /**
    * Force either with $ or without $ prefix
    */
    {}
  )).prefixed;
  if (process.env.NODE_ENV === "development" && !conf)
    throw new Error("Haven't called createTamagui yet");
  var tokens = conf.tokens, tokensParsed = conf.tokensParsed;
  return prefixed === !1 ? tokens : prefixed === !0 ? tokensParsed : tokensMerged;
}, getTokenObject = function(value, group) {
  var _tokensMerged_group, _tokensMerged_, _conf_specificTokens_value;
  return (_conf_specificTokens_value = conf.specificTokens[value]) !== null && _conf_specificTokens_value !== void 0 ? _conf_specificTokens_value : group ? (_tokensMerged_group = tokensMerged[group]) === null || _tokensMerged_group === void 0 ? void 0 : _tokensMerged_group[value] : (_tokensMerged_ = tokensMerged[Object.keys(tokensMerged).find(function(cat) {
    return tokensMerged[cat][value];
  }) || ""]) === null || _tokensMerged_ === void 0 ? void 0 : _tokensMerged_[value];
}, getToken = function(value, group) {
  var useVariable = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : isWeb, token = getTokenObject(value, group);
  return useVariable ? token == null ? void 0 : token.variable : token == null ? void 0 : token.val;
}, getTokenValue = function(value, group) {
  return getToken(value, group, !1);
}, useTokens = getTokens, getThemes = function() {
  return conf.themes;
}, configListeners = /* @__PURE__ */ new Set(), onConfiguredOnce = function(cb) {
  conf ? cb(conf) : configListeners.add(cb);
}, updateConfig = function(key, value) {
  Object.assign(conf[key], value);
}, getFont = function(name) {
  var _Object_entries_find, conf2 = getConfig(), _conf_fontsParsed_name;
  return (_conf_fontsParsed_name = conf2.fontsParsed[name]) !== null && _conf_fontsParsed_name !== void 0 ? _conf_fontsParsed_name : (_Object_entries_find = Object.entries(conf2.fontsParsed).find(function(param) {
    var _param = _sliced_to_array(param, 1), k = _param[0], _conf_fontsParsed_k_family, _conf_fontsParsed_k;
    return ((_conf_fontsParsed_k = conf2.fontsParsed[k]) === null || _conf_fontsParsed_k === void 0 || (_conf_fontsParsed_k_family = _conf_fontsParsed_k.family) === null || _conf_fontsParsed_k_family === void 0 ? void 0 : _conf_fontsParsed_k_family.val) === name;
  })) === null || _Object_entries_find === void 0 ? void 0 : _Object_entries_find[1];
}, devConfig;
function setupDev(conf2) {
  process.env.NODE_ENV === "development" && (devConfig = conf2);
}
export {
  configListeners,
  devConfig,
  getConfig,
  getFont,
  getThemes,
  getToken,
  getTokenObject,
  getTokenValue,
  getTokens,
  onConfiguredOnce,
  setConfig,
  setConfigFont,
  setTokens,
  setupDev,
  updateConfig,
  useTokens
};
//# sourceMappingURL=config.js.map
