import { isWeb } from "@tamagui/constants";
import { configListeners, setConfig, setTokens } from "./config";
import { createVariables } from "./createVariables";
import { getThemeCSSRules } from "./helpers/getThemeCSSRules";
import { getAllRules, listenForSheetChanges, scanAllSheets } from "./helpers/insertStyleRule";
import { proxyThemesToParents } from "./helpers/proxyThemeToParents";
import { registerCSSVariable, variableToCSS } from "./helpers/registerCSSVariable";
import { ensureThemeVariable } from "./helpers/themes";
import { configureMedia } from "./hooks/useMedia";
import { parseFont, registerFontVariables } from "./insertFont";
import { Tamagui } from "./Tamagui";
function _array_like_to_array(arr, len) {
  (len == null || len > arr.length) && (len = arr.length);
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
function _array_with_holes(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _array_without_holes(arr) {
  if (Array.isArray(arr))
    return _array_like_to_array(arr);
}
function _define_property(obj, key, value) {
  return key in obj ? Object.defineProperty(obj, key, {
    value,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : obj[key] = value, obj;
}
function _iterable_to_array(iter) {
  if (typeof Symbol < "u" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
    return Array.from(iter);
}
function _iterable_to_array_limit(arr, i) {
  var _i = arr == null ? null : typeof Symbol < "u" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i != null) {
    var _arr = [], _n = !0, _d = !1, _s, _e;
    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done) && (_arr.push(_s.value), !(i && _arr.length === i)); _n = !0)
        ;
    } catch (err) {
      _d = !0, _e = err;
    } finally {
      try {
        !_n && _i.return != null && _i.return();
      } finally {
        if (_d)
          throw _e;
      }
    }
    return _arr;
  }
}
function _non_iterable_rest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _non_iterable_spread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _object_spread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {}, ownKeys2 = Object.keys(source);
    typeof Object.getOwnPropertySymbols == "function" && (ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
      return Object.getOwnPropertyDescriptor(source, sym).enumerable;
    }))), ownKeys2.forEach(function(key) {
      _define_property(target, key, source[key]);
    });
  }
  return target;
}
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _object_spread_props(target, source) {
  return source = source ?? {}, Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
    Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
  }), target;
}
function _sliced_to_array(arr, i) {
  return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();
}
function _to_consumable_array(arr) {
  return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();
}
function _unsupported_iterable_to_array(o, minLen) {
  if (o) {
    if (typeof o == "string")
      return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor && (n = o.constructor.name), n === "Map" || n === "Set")
      return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
      return _array_like_to_array(o, minLen);
  }
}
var createdConfigs = /* @__PURE__ */ new WeakMap();
function createTamagui(configIn) {
  if (createdConfigs.has(configIn))
    return configIn;
  var tokensParsed = {}, tokens = createVariables(configIn.tokens || {});
  if (configIn.tokens) {
    var tokensMerged = {};
    for (var cat in tokens) {
      tokensParsed[cat] = {}, tokensMerged[cat] = {};
      var tokenCat = tokens[cat];
      for (var key in tokenCat) {
        var val = tokenCat[key], prefixedKey = "$".concat(key);
        tokensParsed[cat][prefixedKey] = val, tokensMerged[cat][prefixedKey] = val, tokensMerged[cat][key] = val;
      }
    }
    setTokens(tokensMerged);
  }
  var foundThemes;
  if (configIn.themes) {
    var noThemes = Object.keys(configIn.themes).length === 0;
    foundThemes = scanAllSheets(noThemes, tokensParsed);
  }
  listenForSheetChanges();
  var fontSizeTokens = null, fontsParsed;
  if (configIn.fonts) {
    var fontTokens = Object.fromEntries(Object.entries(configIn.fonts).map(function(param) {
      var _param = _sliced_to_array(param, 2), k = _param[0], v = _param[1];
      return [
        k,
        createVariables(v, "f", !0)
      ];
    }));
    fontsParsed = function() {
      var res = {};
      for (var familyName in fontTokens) {
        var font = fontTokens[familyName], fontParsed = parseFont(font);
        res["$".concat(familyName)] = fontParsed, !fontSizeTokens && fontParsed.size && (fontSizeTokens = new Set(Object.keys(fontParsed.size)));
      }
      return res;
    }();
  }
  var specificTokens = {}, themeConfig = function() {
    var cssRuleSets = [], declarations = [], fontDeclarations = {};
    for (var key2 in tokens)
      for (var skey in tokens[key2]) {
        var variable = tokens[key2][skey];
        if (specificTokens["$".concat(key2, ".").concat(skey)] = variable, process.env.NODE_ENV === "development" && typeof variable > "u")
          throw new Error("No value for tokens.".concat(key2, ".").concat(skey, `:
`).concat(JSON.stringify(variable, null, 2)));
        isWeb && (registerCSSVariable(variable), declarations.push(variableToCSS(variable, key2 === "zIndex")));
      }
    if (isWeb) {
      var declarationsToRuleSet = function(decs) {
        var selector = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
        return ":root".concat(selector, " {").concat(sep).concat(_to_consumable_array(decs).join(";".concat(sep))).concat(sep, "}");
      };
      for (var key1 in fontsParsed) {
        var fontParsed = fontsParsed[key1], _ref = _sliced_to_array(key1.includes("_") ? key1.split("_") : [
          key1
        ], 2), name = _ref[0], language = _ref[1], fontVars = registerFontVariables(fontParsed);
        fontDeclarations[key1] = {
          name: name.slice(1),
          declarations: fontVars,
          language
        };
      }
      var sep = configIn.cssStyleSeparator || "";
      if (cssRuleSets.push(declarationsToRuleSet(declarations)), fontDeclarations)
        for (var key22 in fontDeclarations) {
          var _fontDeclarations_key = fontDeclarations[key22], name1 = _fontDeclarations_key.name, declarations1 = _fontDeclarations_key.declarations, _fontDeclarations_key_language = _fontDeclarations_key.language, language1 = _fontDeclarations_key_language === void 0 ? "default" : _fontDeclarations_key_language, fontSelector = ".font_".concat(name1), langSelector = ":root .t_lang-".concat(name1, "-").concat(language1, " ").concat(fontSelector), selectors = language1 === "default" ? " ".concat(fontSelector, ", ").concat(langSelector) : langSelector, specificRuleSet = declarationsToRuleSet(declarations1, selectors);
          cssRuleSets.push(specificRuleSet);
        }
    }
    var themesIn = _object_spread({}, configIn.themes), dedupedThemes = foundThemes ?? getThemesDeduped(themesIn), themes = proxyThemesToParents(dedupedThemes);
    return {
      themes,
      cssRuleSets,
      getThemeRulesSets: function() {
        var themeRuleSets = [];
        if (isWeb) {
          var _iteratorNormalCompletion = !0, _didIteratorError = !1, _iteratorError = void 0;
          try {
            for (var _iterator = dedupedThemes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = !0) {
              var _step_value = _step.value, names = _step_value.names, theme = _step_value.theme, nextRules = getThemeCSSRules({
                config: configIn,
                themeName: names[0],
                names,
                theme
              });
              themeRuleSets = _to_consumable_array(themeRuleSets).concat(_to_consumable_array(nextRules));
            }
          } catch (err) {
            _didIteratorError = !0, _iteratorError = err;
          } finally {
            try {
              !_iteratorNormalCompletion && _iterator.return != null && _iterator.return();
            } finally {
              if (_didIteratorError)
                throw _iteratorError;
            }
          }
        }
        return themeRuleSets;
      }
    };
  }(), shorthands = configIn.shorthands || {}, lastCSSInsertedRulesIndex = -1, getCSS = function() {
    var opts = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, _opts_separator = opts.separator, separator = _opts_separator === void 0 ? `
` : _opts_separator, sinceLastCall = opts.sinceLastCall, exclude = opts.exclude;
    if (sinceLastCall && lastCSSInsertedRulesIndex >= 0) {
      var rules = getAllRules();
      return lastCSSInsertedRulesIndex = rules.length, rules.slice(lastCSSInsertedRulesIndex).join(separator);
    }
    lastCSSInsertedRulesIndex = 0;
    var runtimeStyles = getAllRules().join(separator);
    if (exclude === "design-system")
      return runtimeStyles;
    var designSystem = `._ovs-contain {overscroll-behavior:contain;}
.is_Text .is_Text {display:inline-flex;}
._dsp_contents {display:contents;}
`.concat(themeConfig.cssRuleSets.join(separator));
    return "".concat(designSystem, `
`).concat(exclude ? "" : themeConfig.getThemeRulesSets().join(separator), `
`).concat(runtimeStyles);
  }, getNewCSS = function(opts) {
    return getCSS(_object_spread_props(_object_spread({}, opts), {
      sinceLastCall: !0
    }));
  }, defaultFontName = configIn.defaultFont || // uses font named "body" if present for compat
  configIn.fonts && ("body" in configIn.fonts ? "body" : "");
  !defaultFontName && configIn.fonts && (defaultFontName = Object.keys(configIn.fonts)[0]), (defaultFontName == null ? void 0 : defaultFontName[0]) === "$" && (defaultFontName = defaultFontName.slice(1));
  var defaultFont = "$".concat(defaultFontName), config = _object_spread_props(_object_spread({
    fonts: {},
    onlyAllowShorthands: !1,
    fontLanguages: [],
    animations: {},
    media: {}
  }, configIn), {
    unset: _object_spread({
      fontFamily: configIn.defaultFont ? defaultFont : void 0
    }, configIn.unset),
    settings: _object_spread({
      webContainerType: "inline-size"
    }, configIn.settings),
    tokens,
    // vite made this into a function if it wasn't set
    shorthands,
    inverseShorthands: shorthands ? Object.fromEntries(Object.entries(shorthands).map(function(param) {
      var _param = _sliced_to_array(param, 2), k = _param[0], v = _param[1];
      return [
        v,
        k
      ];
    })) : {},
    themes: themeConfig.themes,
    fontsParsed: fontsParsed || {},
    themeConfig,
    tokensParsed,
    parsed: !0,
    getNewCSS,
    getCSS,
    defaultFont,
    fontSizeTokens: fontSizeTokens || /* @__PURE__ */ new Set(),
    specificTokens
  });
  if (configureMedia(config), setConfig(config), createdConfigs.set(config, !0), configListeners.size && (configListeners.forEach(function(cb) {
    return cb(config);
  }), configListeners.clear()), process.env.NODE_ENV === "development") {
    var _process_env_DEBUG;
    !((_process_env_DEBUG = process.env.DEBUG) === null || _process_env_DEBUG === void 0) && _process_env_DEBUG.startsWith("tamagui") && console.info("Tamagui config:", config), globalThis.Tamagui || (globalThis.Tamagui = Tamagui);
  }
  return config;
}
function getThemesDeduped(themes) {
  var dedupedThemes = [], existing = /* @__PURE__ */ new Map();
  for (var themeName in themes) {
    var darkOrLightSpecificPrefix = themeName.startsWith("dark") ? "dark" : themeName.startsWith("light") ? "light" : "", rawTheme = themes[themeName], key = darkOrLightSpecificPrefix + JSON.stringify(rawTheme);
    if (existing.has(key)) {
      var e = existing.get(key);
      e.names.push(themeName);
      continue;
    }
    var theme = _object_spread({}, rawTheme);
    for (var key1 in theme)
      ensureThemeVariable(theme, key1);
    var deduped = {
      names: [
        themeName
      ],
      theme
    };
    dedupedThemes.push(deduped), existing.set(key, deduped);
  }
  return dedupedThemes;
}
export {
  createTamagui
};
//# sourceMappingURL=createTamagui.js.map
