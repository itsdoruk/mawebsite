import { isWeb } from "@tamagui/constants";
import { simpleHash } from "@tamagui/helpers";
import { getConfig } from "./config";
function _define_property(obj, key, value) {
  return key in obj ? Object.defineProperty(obj, key, {
    value,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : obj[key] = value, obj;
}
var IS_VAR = "isVar", createVariable = function(props) {
  var skipHash = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1;
  if (!skipHash && isVariable(props))
    return props;
  var key = props.key, name = props.name, val = props.val, _obj;
  return _obj = {}, _define_property(_obj, IS_VAR, !0), _define_property(_obj, "key", key), _define_property(_obj, "name", skipHash ? "" : simpleHash(name, 40)), _define_property(_obj, "val", val), _define_property(_obj, "variable", isWeb ? skipHash ? "var(--".concat(name, ")") : createCSSVariable(name) : ""), _obj;
};
function variableToString(vrble) {
  var getValue = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1;
  return isVariable(vrble) ? !getValue && isWeb && vrble.variable ? vrble.variable : "".concat(vrble.val) : "".concat(vrble || "");
}
function isVariable(v) {
  return v && typeof v == "object" && IS_VAR in v;
}
function getVariable(nameOrVariable) {
  if (setDidGetVariableValue(!0), isVariable(nameOrVariable))
    return variableToString(nameOrVariable);
  var tokens = getConfig().tokensParsed, _tokens_nameOrVariable;
  return variableToString((_tokens_nameOrVariable = tokens[nameOrVariable]) !== null && _tokens_nameOrVariable !== void 0 ? _tokens_nameOrVariable : nameOrVariable);
}
var accessed = !1, setDidGetVariableValue = function(val) {
  return accessed = val;
}, didGetVariableValue = function() {
  return accessed;
};
function getVariableValue(v) {
  return isVariable(v) ? (setDidGetVariableValue(!0), v.val) : v;
}
function getVariableName(v) {
  return isVariable(v) ? v.name : v;
}
function getVariableVariable(v) {
  return isVariable(v) ? v.variable : v;
}
var createCSSVariable = function(nameProp) {
  var includeVar = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !0;
  if (process.env.NODE_ENV === "development" && (!nameProp || typeof nameProp != "string"))
    throw new Error("createCSSVariable expected string, got: ".concat(nameProp));
  var name = simpleHash(nameProp, 60);
  return includeVar ? "var(--".concat(name, ")") : name;
};
export {
  createCSSVariable,
  createVariable,
  didGetVariableValue,
  getVariable,
  getVariableName,
  getVariableValue,
  getVariableVariable,
  isVariable,
  setDidGetVariableValue,
  variableToString
};
//# sourceMappingURL=createVariable.js.map
