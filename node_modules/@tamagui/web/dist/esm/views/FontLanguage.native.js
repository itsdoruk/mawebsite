import { jsx as _jsx } from "react/jsx-runtime";
import { useMemo } from "react";
import { ComponentContext } from "../contexts/ComponentContext";
function _object_without_properties(source, excluded) {
  if (source == null)
    return {};
  var target = _object_without_properties_loose(source, excluded), key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++)
      key = sourceSymbolKeys[i], !(excluded.indexOf(key) >= 0) && Object.prototype.propertyIsEnumerable.call(source, key) && (target[key] = source[key]);
  }
  return target;
}
function _object_without_properties_loose(source, excluded) {
  if (source == null)
    return {};
  var target = {}, sourceKeys = Object.keys(source), key, i;
  for (i = 0; i < sourceKeys.length; i++)
    key = sourceKeys[i], !(excluded.indexOf(key) >= 0) && (target[key] = source[key]);
  return target;
}
var FontLanguage = function(_param) {
  var children = _param.children, props = _object_without_properties(_param, [
    "children"
  ]), language = useMemo(function() {
    return props;
  }, [
    JSON.stringify(props)
  ]);
  return /* @__PURE__ */ _jsx(ComponentContext.Provider, {
    language,
    children
  });
};
FontLanguage.displayName = "FontLanguage";
export {
  FontLanguage
};
//# sourceMappingURL=FontLanguage.native.js.map
