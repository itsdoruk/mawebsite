import { stylePropsTextOnly, validStyles } from "@tamagui/helpers";
import { createComponent } from "../createComponent";
function _define_property(obj, key, value) {
  return key in obj ? Object.defineProperty(obj, key, {
    value,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : obj[key] = value, obj;
}
function _object_spread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {}, ownKeys2 = Object.keys(source);
    typeof Object.getOwnPropertySymbols == "function" && (ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
      return Object.getOwnPropertyDescriptor(source, sym).enumerable;
    }))), ownKeys2.forEach(function(key) {
      _define_property(target, key, source[key]);
    });
  }
  return target;
}
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _object_spread_props(target, source) {
  return source = source ?? {}, Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
    Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
  }), target;
}
var ellipsisStyle = {
  numberOfLines: 1,
  lineBreakMode: "clip"
}, Text = createComponent({
  acceptsClassName: !0,
  isText: !0,
  defaultProps: _object_spread({
    fontFamily: "unset"
  }, {
    suppressHighlighting: !0
  }),
  inlineWhenUnflattened: /* @__PURE__ */ new Set([
    "fontFamily"
  ]),
  variants: _object_spread_props(_object_spread(_object_spread_props(_object_spread({}, !1), {
    // ??
    ellipsizeMode: {
      "...": function() {
        return null;
      }
    }
  }), !1), {
    /**
    * @deprecated Use ellipsis instead
    */
    ellipse: {
      true: ellipsisStyle
    },
    ellipsis: {
      true: ellipsisStyle
    }
  }),
  validStyles: _object_spread({}, validStyles, stylePropsTextOnly)
});
Text.displayName = "Text";
export {
  Text
};
//# sourceMappingURL=Text.js.map
