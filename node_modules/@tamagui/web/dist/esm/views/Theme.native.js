import { jsx as _jsx } from "react/jsx-runtime";
import { isWeb } from "@tamagui/constants";
import React, { Children, cloneElement, forwardRef, isValidElement, useRef } from "react";
import { variableToString } from "../createVariable";
import { ThemeManagerIDContext } from "../helpers/ThemeManagerContext";
import { useChangeThemeEffect } from "../hooks/useTheme";
import { ThemeDebug } from "./ThemeDebug";
function _define_property(obj, key, value) {
  return key in obj ? Object.defineProperty(obj, key, {
    value,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : obj[key] = value, obj;
}
function _object_without_properties(source, excluded) {
  if (source == null)
    return {};
  var target = _object_without_properties_loose(source, excluded), key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++)
      key = sourceSymbolKeys[i], !(excluded.indexOf(key) >= 0) && Object.prototype.propertyIsEnumerable.call(source, key) && (target[key] = source[key]);
  }
  return target;
}
function _object_without_properties_loose(source, excluded) {
  if (source == null)
    return {};
  var target = {}, sourceKeys = Object.keys(source), key, i;
  for (i = 0; i < sourceKeys.length; i++)
    key = sourceKeys[i], !(excluded.indexOf(key) >= 0) && (target[key] = source[key]);
  return target;
}
var Theme = /* @__PURE__ */ forwardRef(function(_param, ref) {
  var children = _param.children, props = _object_without_properties(_param, [
    "children"
  ]);
  if (props.disable)
    return children;
  var isRoot = !!props._isRoot, themeState = useChangeThemeEffect(props, isRoot), disableDirectChildTheme = props["disable-child-theme"], finalChildren = disableDirectChildTheme ? Children.map(children, function(child) {
    return /* @__PURE__ */ cloneElement(child, _define_property({}, "data-disable-theme", !0));
  }) : children;
  if (ref)
    try {
      React.Children.only(finalChildren), finalChildren = /* @__PURE__ */ cloneElement(finalChildren, {
        ref
      });
    } catch {
    }
  return process.env.NODE_ENV === "development" && props.debug === "visualize" && (finalChildren = /* @__PURE__ */ _jsx(ThemeDebug, {
    themeState,
    themeProps: props,
    children: finalChildren
  })), getThemedChildren(themeState, finalChildren, props, isRoot);
});
Theme.displayName = "Theme";
Theme.avoidForwardRef = !0;
function getThemedChildren(themeState, children, props) {
  var isRoot = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : !1, themeManager = themeState.themeManager, isNewTheme = themeState.isNewTheme;
  if (!themeManager)
    throw new Error(process.env.NODE_ENV === "development" ? "\u274C No theme found, either incorrect name, potential duplicate tamagui deps, or TamaguiProvider not providing themes." : "\u274C 005");
  var shallow = props.shallow, forceClassName = props.forceClassName, hasEverThemed = useRef(!1), shouldRenderChildrenWithTheme = isNewTheme || props.inverse || hasEverThemed.current || forceClassName || isRoot;
  if (shouldRenderChildrenWithTheme && (hasEverThemed.current = !0), !shouldRenderChildrenWithTheme)
    return children;
  var next = children;
  shallow && (next = Children.toArray(children).map(function(child) {
    return /* @__PURE__ */ isValidElement(child) ? /* @__PURE__ */ cloneElement(child, void 0, /* @__PURE__ */ _jsx(Theme, {
      name: themeManager.state.parentName,
      children: child.props.children
    })) : child;
  }));
  var elementsWithContext = /* @__PURE__ */ _jsx(ThemeManagerIDContext.Provider, {
    value: themeManager.id,
    children: next
  });
  return forceClassName === !1 ? elementsWithContext : isWeb ? wrapThemeElements({
    children: elementsWithContext,
    themeState,
    forceClassName,
    isRoot
  }) : elementsWithContext;
}
function wrapThemeElements(param) {
  var children = param.children, themeState = param.themeState, forceClassName = param.forceClassName, isRoot = param.isRoot;
  if (isRoot && forceClassName === !1)
    return children;
  var inverse = themeState.inversed, requiresExtraWrapper = inverse != null || forceClassName, _getThemeClassNameAndStyle = getThemeClassNameAndStyle(themeState, isRoot), className = _getThemeClassNameAndStyle.className, style = _getThemeClassNameAndStyle.style, themedChildren = /* @__PURE__ */ _jsx("span", {
    className: "".concat(className, " _dsp_contents is_Theme"),
    style,
    children
  });
  if (requiresExtraWrapper) {
    var _themeState_state, name = ((_themeState_state = themeState.state) === null || _themeState_state === void 0 ? void 0 : _themeState_state.name) || "", inverseClassName = name.startsWith("light") ? "t_light is_inversed" : name.startsWith("dark") ? "t_dark is_inversed" : "";
    themedChildren = /* @__PURE__ */ _jsx("span", {
      className: "".concat(inverse ? inverseClassName : "", " _dsp_contents"),
      children: themedChildren
    });
  }
  return themedChildren;
}
var emptyObj = {};
function getThemeClassNameAndStyle(themeState) {
  var isRoot = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1, _themeState_state, _themeState_state1;
  if (!themeState.isNewTheme)
    return {
      className: "",
      style: emptyObj
    };
  var themeColor = !((_themeState_state = themeState.state) === null || _themeState_state === void 0) && _themeState_state.theme && themeState.isNewTheme ? variableToString(themeState.state.theme.color) : "", style = themeColor ? {
    color: themeColor
  } : void 0, className = ((_themeState_state1 = themeState.state) === null || _themeState_state1 === void 0 ? void 0 : _themeState_state1.className) || "";
  return isRoot && (className = className.replace("t_sub_theme", "")), {
    style,
    className
  };
}
export {
  Theme,
  getThemedChildren
};
//# sourceMappingURL=Theme.js.map
