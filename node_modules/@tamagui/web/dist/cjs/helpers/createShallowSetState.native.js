"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var createShallowSetState_exports = {};
__export(createShallowSetState_exports, {
  createShallowSetState: () => createShallowSetState,
  isEqualShallow: () => isEqualShallow,
  mergeIfNotShallowEqual: () => mergeIfNotShallowEqual
});
module.exports = __toCommonJS(createShallowSetState_exports);
function _define_property(obj, key, value) {
  return key in obj ? Object.defineProperty(obj, key, {
    value,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : obj[key] = value, obj;
}
function _object_spread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {}, ownKeys = Object.keys(source);
    typeof Object.getOwnPropertySymbols == "function" && (ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
      return Object.getOwnPropertyDescriptor(source, sym).enumerable;
    }))), ownKeys.forEach(function(key) {
      _define_property(target, key, source[key]);
    });
  }
  return target;
}
function createShallowSetState(setter, debug) {
  return function(next) {
    return setter(function(prev) {
      return mergeIfNotShallowEqual(prev, next, debug);
    });
  };
}
function mergeIfNotShallowEqual(prev, next, debug) {
  return isEqualShallow(prev, next) ? prev : (process.env.NODE_ENV === "development" && debug && console.warn("setStateShallow CHANGE", {
    prev,
    next
  }), _object_spread({}, prev, next));
}
function isEqualShallow(prev, next) {
  for (var key in next)
    if (prev[key] !== next[key])
      return !1;
  return !0;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  createShallowSetState,
  isEqualShallow,
  mergeIfNotShallowEqual
});
//# sourceMappingURL=createShallowSetState.js.map
