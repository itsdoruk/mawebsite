"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var mergeProps_exports = {};
__export(mergeProps_exports, {
  mergeProps: () => mergeProps
});
module.exports = __toCommonJS(mergeProps_exports);
var import_useMedia = require("../hooks/useMedia"), import_pseudoDescriptors = require("./pseudoDescriptors");
function _define_property(obj, key, value) {
  return key in obj ? Object.defineProperty(obj, key, {
    value,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : obj[key] = value, obj;
}
function _object_spread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {}, ownKeys = Object.keys(source);
    typeof Object.getOwnPropertySymbols == "function" && (ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
      return Object.getOwnPropertyDescriptor(source, sym).enumerable;
    }))), ownKeys.forEach(function(key) {
      _define_property(target, key, source[key]);
    });
  }
  return target;
}
var mergeProps = function(a, b, inverseShorthands) {
  var out = {};
  for (var key in a)
    mergeProp(out, a, b, key, inverseShorthands);
  if (b)
    for (var key1 in b)
      mergeProp(out, b, void 0, key1, inverseShorthands);
  return out;
};
function mergeProp(out, a, b, key, inverseShorthands) {
  var longhand = (inverseShorthands == null ? void 0 : inverseShorthands[key]) || null, val = a[key];
  if (key in import_pseudoDescriptors.pseudoDescriptors || import_useMedia.mediaKeys.has(key)) {
    out[key] = _object_spread({}, out[key], val);
    return;
  }
  b && (key in b || longhand && longhand in b) || (out[longhand || key] = val);
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  mergeProps
});
//# sourceMappingURL=mergeProps.js.map
