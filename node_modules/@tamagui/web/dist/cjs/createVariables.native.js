"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var createVariables_exports = {};
__export(createVariables_exports, {
  createVariables: () => createVariables
});
module.exports = __toCommonJS(createVariables_exports);
var import_helpers = require("@tamagui/helpers"), import_createVariable = require("./createVariable"), cache = /* @__PURE__ */ new WeakMap(), createVariables = function(tokens) {
  var parentPath = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "", isFont = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1;
  if (cache.has(tokens))
    return tokens;
  var res = {}, i = 0;
  for (var keyIn in tokens) {
    i++;
    var val = tokens[keyIn], isPrefixed = keyIn[0] === "$", keyWithPrefix = isPrefixed ? keyIn : "$".concat(keyIn), key = isPrefixed ? keyWithPrefix.slice(1) : keyIn;
    if ((0, import_createVariable.isVariable)(val)) {
      res[key] = val;
      continue;
    }
    var niceKey = (0, import_helpers.simpleHash)(key), name = isFont ? niceKey.slice(0, 2) : i;
    if (name = parentPath ? "".concat(parentPath, "-").concat(name) : niceKey, val && typeof val == "object") {
      res[key] = createVariables(tokens[key], name, !1);
      continue;
    }
    var finalValue = (0, import_createVariable.isVariable)(val) ? val : (0, import_createVariable.createVariable)({
      val,
      name,
      key: keyWithPrefix
    });
    res[key] = finalValue;
  }
  return cache.set(res, !0), res;
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  createVariables
});
//# sourceMappingURL=createVariables.js.map
