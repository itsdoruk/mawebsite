function _array_like_to_array(arr, len) {
  (len == null || len > arr.length) && (len = arr.length);
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
function _array_without_holes(arr) {
  if (Array.isArray(arr))
    return _array_like_to_array(arr);
}
function _iterable_to_array(iter) {
  if (typeof Symbol < "u" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
    return Array.from(iter);
}
function _non_iterable_spread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _to_consumable_array(arr) {
  return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();
}
function _unsupported_iterable_to_array(o, minLen) {
  if (o) {
    if (typeof o == "string")
      return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor && (n = o.constructor.name), n === "Map" || n === "Set")
      return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
      return _array_like_to_array(o, minLen);
  }
}
function timer() {
  var runs = 0, typesOfRuns = /* @__PURE__ */ new Set(), timings = {};
  function print() {
    var typeRuns = runs / typesOfRuns.size, totalTime = 0, out = [
      "Ran ".concat(typeRuns, " per-type, ").concat(runs, " total")
    ].concat(_to_consumable_array(_to_consumable_array(typesOfRuns).map(function(name) {
      var avg = "avg ".concat("".concat(timings[name] / typeRuns).slice(0, 9).padEnd(9), "ms"), total = timings[name];
      return totalTime += total, "".concat(name.slice(0, 30).padStart(31), " | ").concat(avg, " | total ").concat(total, "ms");
    })), [
      "                                    total ".concat(totalTime, "ms")
    ]).join(`
`);
    return console.info(out), out;
  }
  return {
    start: function(opts) {
      var _opts_quiet, quiet = (_opts_quiet = opts == null ? void 0 : opts.quiet) !== null && _opts_quiet !== void 0 ? _opts_quiet : !0;
      function time(strings) {
        for (var _len = arguments.length, vars = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)
          vars[_key - 1] = arguments[_key];
        var _timings, _tag, elapsed = performance.now() - start2;
        start2 = performance.now();
        var tag = strings[0];
        typesOfRuns.add(tag), runs++;
        var _;
        if ((_ = (_timings = timings)[_tag = tag]) !== null && _ !== void 0 || (_timings[_tag] = 0), timings[tag] += elapsed, !quiet) {
          var result = "";
          strings.forEach(function(str, i) {
            result += "".concat(str).concat(i === strings.length - 1 ? "" : vars[i]);
          }), console.info("".concat("".concat(elapsed, "ms").slice(0, 6).padStart(7), " |"), result);
        }
      }
      var start2 = performance.now();
      return time.print = print, time;
    },
    profile: function() {
      return {
        timings,
        runs
      };
    },
    print
  };
}
export {
  timer
};
//# sourceMappingURL=index.js.map
