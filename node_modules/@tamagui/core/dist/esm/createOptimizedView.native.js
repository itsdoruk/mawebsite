import { createElement, useContext } from "react";
function createOptimizedView(children, viewProps, baseViews) {
  var TextAncestor = baseViews.TextAncestor, ViewNativeComponent = baseViews.View, accessibilityElementsHidden = (
    // ...otherProps
    viewProps.accessibilityElementsHidden
  ), accessibilityLabel = viewProps.accessibilityLabel, accessibilityLabelledBy = viewProps.accessibilityLabelledBy, accessibilityLiveRegion = viewProps.accessibilityLiveRegion, accessibilityRole = viewProps.accessibilityRole, accessibilityState = viewProps.accessibilityState, accessibilityValue = viewProps.accessibilityValue, ariaBusy = viewProps["aria-busy"], ariaChecked = viewProps["aria-checked"], ariaDisabled = viewProps["aria-disabled"], ariaExpanded = viewProps["aria-expanded"], ariaHidden = viewProps["aria-hidden"], ariaLabel = viewProps["aria-label"], ariaLabelledBy = viewProps["aria-labelledby"], ariaLive = viewProps["aria-live"], ariaSelected = viewProps["aria-selected"], ariaValueMax = viewProps["aria-valuemax"], ariaValueMin = viewProps["aria-valuemin"], ariaValueNow = viewProps["aria-valuenow"], ariaValueText = viewProps["aria-valuetext"], focusable = viewProps.focusable, id = viewProps.id, importantForAccessibility = viewProps.importantForAccessibility, nativeID = viewProps.nativeID, pointerEvents = viewProps.pointerEvents, role = viewProps.role, tabIndex = viewProps.tabIndex, _ariaLabelledBy_split, _accessibilityLabelledBy = (_ariaLabelledBy_split = ariaLabelledBy == null ? void 0 : ariaLabelledBy.split(/\s*,\s*/g)) !== null && _ariaLabelledBy_split !== void 0 ? _ariaLabelledBy_split : accessibilityLabelledBy, _accessibilityState;
  (accessibilityState != null || ariaBusy != null || ariaChecked != null || ariaDisabled != null || ariaExpanded != null || ariaSelected != null) && (_accessibilityState = {
    busy: ariaBusy ?? (accessibilityState == null ? void 0 : accessibilityState.busy),
    checked: ariaChecked ?? (accessibilityState == null ? void 0 : accessibilityState.checked),
    disabled: ariaDisabled ?? (accessibilityState == null ? void 0 : accessibilityState.disabled),
    expanded: ariaExpanded ?? (accessibilityState == null ? void 0 : accessibilityState.expanded),
    selected: ariaSelected ?? (accessibilityState == null ? void 0 : accessibilityState.selected)
  });
  var _accessibilityValue;
  (accessibilityValue != null || ariaValueMax != null || ariaValueMin != null || ariaValueNow != null || ariaValueText != null) && (_accessibilityValue = {
    max: ariaValueMax ?? (accessibilityValue == null ? void 0 : accessibilityValue.max),
    min: ariaValueMin ?? (accessibilityValue == null ? void 0 : accessibilityValue.min),
    now: ariaValueNow ?? (accessibilityValue == null ? void 0 : accessibilityValue.now),
    text: ariaValueText ?? (accessibilityValue == null ? void 0 : accessibilityValue.text)
  });
  var style = Array.isArray(viewProps.style) ? baseViews.StyleSheet.flatten(viewProps.style) : viewProps.style, newPointerEvents = (style == null ? void 0 : style.pointerEvents) || pointerEvents, finalProps = viewProps, extras = {
    accessibilityLiveRegion: ariaLive === "off" ? "none" : ariaLive ?? accessibilityLiveRegion,
    accessibilityLabel: ariaLabel ?? accessibilityLabel,
    focusable: tabIndex !== void 0 ? !tabIndex : focusable,
    accessibilityState: _accessibilityState,
    accessibilityRole: role ? getAccessibilityRoleFromRole(role) : accessibilityRole,
    accessibilityElementsHidden: ariaHidden ?? accessibilityElementsHidden,
    accessibilityLabelledBy: _accessibilityLabelledBy,
    accessibilityValue: _accessibilityValue,
    importantForAccessibility: ariaHidden === !0 ? "no-hide-descendants" : importantForAccessibility,
    nativeID: id ?? nativeID,
    style,
    pointerEvents: newPointerEvents
  };
  for (var key in extras)
    extras[key] != null && (finalProps[key] = extras[key]);
  var isInText = useContext(TextAncestor), finalElement = /* @__PURE__ */ createElement(ViewNativeComponent, finalProps, children);
  return isInText ? /* @__PURE__ */ createElement(TextAncestor.Provider, {
    value: !1
  }, finalElement) : finalElement;
}
function getAccessibilityRoleFromRole(role) {
  switch (role) {
    case "alert":
      return "alert";
    case "alertdialog":
      return;
    case "application":
      return;
    case "article":
      return;
    case "banner":
      return;
    case "button":
      return "button";
    case "cell":
      return;
    case "checkbox":
      return "checkbox";
    case "columnheader":
      return;
    case "combobox":
      return "combobox";
    case "complementary":
      return;
    case "contentinfo":
      return;
    case "definition":
      return;
    case "dialog":
      return;
    case "directory":
      return;
    case "document":
      return;
    case "feed":
      return;
    case "figure":
      return;
    case "form":
      return;
    case "grid":
      return "grid";
    case "group":
      return;
    case "heading":
      return "header";
    case "img":
      return "image";
    case "link":
      return "link";
    case "list":
      return "list";
    case "listitem":
      return;
    case "log":
      return;
    case "main":
      return;
    case "marquee":
      return;
    case "math":
      return;
    case "menu":
      return "menu";
    case "menubar":
      return "menubar";
    case "menuitem":
      return "menuitem";
    case "meter":
      return;
    case "navigation":
      return;
    case "none":
      return "none";
    case "note":
      return;
    case "option":
      return;
    case "presentation":
      return "none";
    case "progressbar":
      return "progressbar";
    case "radio":
      return "radio";
    case "radiogroup":
      return "radiogroup";
    case "region":
      return;
    case "row":
      return;
    case "rowgroup":
      return;
    case "rowheader":
      return;
    case "scrollbar":
      return "scrollbar";
    case "searchbox":
      return "search";
    case "separator":
      return;
    case "slider":
      return "adjustable";
    case "spinbutton":
      return "spinbutton";
    case "status":
      return;
    case "summary":
      return "summary";
    case "switch":
      return "switch";
    case "tab":
      return "tab";
    case "table":
      return;
    case "tablist":
      return "tablist";
    case "tabpanel":
      return;
    case "term":
      return;
    case "timer":
      return "timer";
    case "toolbar":
      return "toolbar";
    case "tooltip":
      return;
    case "tree":
      return;
    case "treegrid":
      return;
    case "treeitem":
      return;
  }
}
export {
  createOptimizedView,
  getAccessibilityRoleFromRole
};
//# sourceMappingURL=createOptimizedView.native.js.map
