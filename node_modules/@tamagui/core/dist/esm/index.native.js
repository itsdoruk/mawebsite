import "@tamagui/react-native-use-responder-events";
import { Stack as WebStack, Text as WebText, View as WebView, composeEventHandlers, setupHooks } from "@tamagui/web";
import { createElement } from "react";
import { createOptimizedView } from "./createOptimizedView";
import { getBaseViews } from "./getBaseViews";
import "./hooks/useElementLayout";
import "./hooks/usePlatformMethods";
import { usePressability } from "./vendor/Pressability";
export * from "@tamagui/web";
export * from "./reactNativeTypes";
function _define_property(obj, key, value) {
  return key in obj ? Object.defineProperty(obj, key, {
    value,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : obj[key] = value, obj;
}
function _object_spread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {}, ownKeys = Object.keys(source);
    typeof Object.getOwnPropertySymbols == "function" && (ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
      return Object.getOwnPropertyDescriptor(source, sym).enumerable;
    }))), ownKeys.forEach(function(key) {
      _define_property(target, key, source[key]);
    });
  }
  return target;
}
var baseViews = getBaseViews();
setupHooks(_object_spread(
  {
    getBaseViews,
    usePropsTransform: function(elementType, propsIn, stateRef, willHydrate) {
      if (0) {
        var isDOM, onMoveShouldSetResponder, onMoveShouldSetResponderCapture, onResponderEnd, onResponderGrant, onResponderMove, onResponderReject, onResponderRelease, onResponderStart, onResponderTerminate, onResponderTerminationRequest, onScrollShouldSetResponder, onScrollShouldSetResponderCapture, onSelectionChangeShouldSetResponder, onSelectionChangeShouldSetResponderCapture, onStartShouldSetResponder, onStartShouldSetResponderCapture, collapsable, focusable, accessible, accessibilityDisabled, onLayout, hrefAttrs, plainDOMProps;
        if (willHydrate || isDOM)
          var hostRef;
        if (isDOM && plainDOMProps.href && hrefAttrs)
          var download, rel, target;
      }
    },
    useEvents: function(viewProps, events, param, setStateShallow, staticConfig) {
      var pseudos = param.pseudos;
      if (events && (events.onFocus && (viewProps.onFocus = events.onFocus), events.onBlur && (viewProps.onBlur = events.onBlur)), staticConfig.isInput) {
        if (events) {
          var onPressIn = events.onPressIn, onPressOut = events.onPressOut, onPress = events.onPress, inputEvents = {
            onPressIn,
            onPressOut: onPressOut || onPress
          };
          onPressOut && onPress && (inputEvents.onPressOut = composeEventHandlers(onPress, onPressOut)), Object.assign(viewProps, inputEvents);
        }
      } else {
        events && viewProps.hitSlop && (events.hitSlop = viewProps.hitSlop);
        var pressability = usePressability(events);
        if (events && (process.env.NODE_ENV === "development" && viewProps.debug && console.info("Checking for press ".concat(!!events.onPress, " then applying pressability props: ").concat(Object.keys(pressability || {}))), events.onPress))
          for (var key in pressability) {
            var og = viewProps[key], val = pressability[key];
            viewProps[key] = og && !dontComposePressabilityKeys[key] ? composeEventHandlers(og, val) : val;
          }
      }
    }
  },
  {
    useChildren: function(elementType, children, viewProps, events, staticConfig) {
      if (process.env.NODE_ENV !== "test") {
        if (elementType === baseViews.View)
          return createOptimizedView(children, viewProps, baseViews);
        if (process.env.TAMAGUI_OPTIMIZE_NATIVE_VIEWS && elementType === baseViews.Text)
          return viewProps.children = children, /* @__PURE__ */ createElement("RCTText", viewProps);
      }
    }
  }
));
var dontComposePressabilityKeys = {
  onClick: !0
}, View = WebView, Stack = WebStack, Text = WebText;
export {
  Stack,
  Text,
  View
};
//# sourceMappingURL=index.js.map
