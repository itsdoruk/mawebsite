"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
}, __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, "default"), secondTarget && __copyProps(secondTarget, mod, "default"));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var src_exports = {};
__export(src_exports, {
  Stack: () => Stack,
  Text: () => Text,
  View: () => View
});
module.exports = __toCommonJS(src_exports);
var import_react_native_use_responder_events = require("@tamagui/react-native-use-responder-events"), import_web = require("@tamagui/web"), import_react = require("react"), import_createOptimizedView = require("./createOptimizedView"), import_getBaseViews = require("./getBaseViews"), import_useElementLayout = require("./hooks/useElementLayout"), import_usePlatformMethods = require("./hooks/usePlatformMethods"), import_Pressability = require("./vendor/Pressability");
__reExport(src_exports, require("@tamagui/web"), module.exports);
__reExport(src_exports, require("./reactNativeTypes"), module.exports);
function _define_property(obj, key, value) {
  return key in obj ? Object.defineProperty(obj, key, {
    value,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : obj[key] = value, obj;
}
function _object_spread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {}, ownKeys = Object.keys(source);
    typeof Object.getOwnPropertySymbols == "function" && (ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
      return Object.getOwnPropertyDescriptor(source, sym).enumerable;
    }))), ownKeys.forEach(function(key) {
      _define_property(target, key, source[key]);
    });
  }
  return target;
}
var baseViews = (0, import_getBaseViews.getBaseViews)();
(0, import_web.setupHooks)(_object_spread(
  {
    getBaseViews: import_getBaseViews.getBaseViews,
    usePropsTransform: function(elementType, propsIn, stateRef, willHydrate) {
      if (0) {
        var isDOM, onMoveShouldSetResponder, onMoveShouldSetResponderCapture, onResponderEnd, onResponderGrant, onResponderMove, onResponderReject, onResponderRelease, onResponderStart, onResponderTerminate, onResponderTerminationRequest, onScrollShouldSetResponder, onScrollShouldSetResponderCapture, onSelectionChangeShouldSetResponder, onSelectionChangeShouldSetResponderCapture, onStartShouldSetResponder, onStartShouldSetResponderCapture, collapsable, focusable, accessible, accessibilityDisabled, onLayout, hrefAttrs, plainDOMProps;
        if (willHydrate || isDOM)
          var hostRef;
        if (isDOM && plainDOMProps.href && hrefAttrs)
          var download, rel, target;
      }
    },
    useEvents: function(viewProps, events, param, setStateShallow, staticConfig) {
      var pseudos = param.pseudos;
      if (events && (events.onFocus && (viewProps.onFocus = events.onFocus), events.onBlur && (viewProps.onBlur = events.onBlur)), staticConfig.isInput) {
        if (events) {
          var onPressIn = events.onPressIn, onPressOut = events.onPressOut, onPress = events.onPress, inputEvents = {
            onPressIn,
            onPressOut: onPressOut || onPress
          };
          onPressOut && onPress && (inputEvents.onPressOut = (0, import_web.composeEventHandlers)(onPress, onPressOut)), Object.assign(viewProps, inputEvents);
        }
      } else {
        events && viewProps.hitSlop && (events.hitSlop = viewProps.hitSlop);
        var pressability = (0, import_Pressability.usePressability)(events);
        if (events && (process.env.NODE_ENV === "development" && viewProps.debug && console.info("Checking for press ".concat(!!events.onPress, " then applying pressability props: ").concat(Object.keys(pressability || {}))), events.onPress))
          for (var key in pressability) {
            var og = viewProps[key], val = pressability[key];
            viewProps[key] = og && !dontComposePressabilityKeys[key] ? (0, import_web.composeEventHandlers)(og, val) : val;
          }
      }
    }
  },
  {
    useChildren: function(elementType, children, viewProps, events, staticConfig) {
      if (process.env.NODE_ENV !== "test") {
        if (elementType === baseViews.View)
          return (0, import_createOptimizedView.createOptimizedView)(children, viewProps, baseViews);
        if (process.env.TAMAGUI_OPTIMIZE_NATIVE_VIEWS && elementType === baseViews.Text)
          return viewProps.children = children, /* @__PURE__ */ (0, import_react.createElement)("RCTText", viewProps);
      }
    }
  }
));
var dontComposePressabilityKeys = {
  onClick: !0
}, View = import_web.View, Stack = import_web.Stack, Text = import_web.Text;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Stack,
  Text,
  View,
  ...require("@tamagui/web"),
  ...require("./reactNativeTypes")
});
//# sourceMappingURL=index.js.map
