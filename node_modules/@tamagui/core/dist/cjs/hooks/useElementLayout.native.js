"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var useElementLayout_exports = {};
__export(useElementLayout_exports, {
  measureLayout: () => measureLayout,
  useElementLayout: () => useElementLayout
});
module.exports = __toCommonJS(useElementLayout_exports);
var import_constants = require("@tamagui/constants"), import_getBoundingClientRect = require("../helpers/getBoundingClientRect");
function _array_like_to_array(arr, len) {
  (len == null || len > arr.length) && (len = arr.length);
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
function _array_with_holes(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _instanceof(left, right) {
  return right != null && typeof Symbol < "u" && right[Symbol.hasInstance] ? !!right[Symbol.hasInstance](left) : left instanceof right;
}
function _iterable_to_array_limit(arr, i) {
  var _i = arr == null ? null : typeof Symbol < "u" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i != null) {
    var _arr = [], _n = !0, _d = !1, _s, _e;
    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done) && (_arr.push(_s.value), !(i && _arr.length === i)); _n = !0)
        ;
    } catch (err) {
      _d = !0, _e = err;
    } finally {
      try {
        !_n && _i.return != null && _i.return();
      } finally {
        if (_d)
          throw _e;
      }
    }
    return _arr;
  }
}
function _non_iterable_rest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _sliced_to_array(arr, i) {
  return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();
}
function _type_of(obj) {
  "@swc/helpers - typeof";
  return obj && typeof Symbol < "u" && obj.constructor === Symbol ? "symbol" : typeof obj;
}
function _unsupported_iterable_to_array(o, minLen) {
  if (o) {
    if (typeof o == "string")
      return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor && (n = o.constructor.name), n === "Map" || n === "Set")
      return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
      return _array_like_to_array(o, minLen);
  }
}
var LayoutHandlers = /* @__PURE__ */ new WeakMap();
var resizeObserver = null;
typeof window < "u" && "ResizeObserver" in window && (resizeObserver = new ResizeObserver(function(entries) {
  var _iteratorNormalCompletion = !0, _didIteratorError = !1, _iteratorError = void 0;
  try {
    for (var _loop = function() {
      var target = _step.value.target, onLayout = LayoutHandlers.get(target);
      if (typeof onLayout != "function")
        return {
          v: void 0
        };
      measureLayout(target, null, function(x, y, width, height, left, top) {
        onLayout({
          nativeEvent: {
            layout: {
              x,
              y,
              width,
              height,
              left,
              top
            },
            target
          },
          timeStamp: Date.now()
        });
      });
    }, _iterator = entries[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = !0) {
      var _ret = _loop();
      if (_type_of(_ret) === "object")
        return _ret.v;
    }
  } catch (err) {
    _didIteratorError = !0, _iteratorError = err;
  } finally {
    try {
      !_iteratorNormalCompletion && _iterator.return != null && _iterator.return();
    } finally {
      if (_didIteratorError)
        throw _iteratorError;
    }
  }
}));
var cache = /* @__PURE__ */ new WeakMap(), measureLayout = function(node, relativeTo, callback) {
  var relativeNode = relativeTo || (node == null ? void 0 : node.parentNode);
  if (_instanceof(relativeNode, HTMLElement)) {
    var now = Date.now();
    cache.set(node, now), Promise.all([
      getBoundingClientRectAsync(node),
      getBoundingClientRectAsync(relativeNode)
    ]).then(function(param) {
      var _param = _sliced_to_array(param, 2), nodeDim = _param[0], relativeNodeDim = _param[1];
      if (relativeNodeDim && nodeDim && cache.get(node) === now) {
        var _getRelativeDimensions = getRelativeDimensions(nodeDim, relativeNodeDim), x = _getRelativeDimensions.x, y = _getRelativeDimensions.y, width = _getRelativeDimensions.width, height = _getRelativeDimensions.height, left = _getRelativeDimensions.left, top = _getRelativeDimensions.top;
        callback(x, y, width, height, left, top);
      }
    });
  }
}, getRelativeDimensions = function(a, b) {
  var height = a.height, left = a.left, top = a.top, width = a.width, x = left - b.left, y = top - b.top;
  return {
    x,
    y,
    width,
    height,
    left,
    top
  };
}, getBoundingClientRectAsync = function(element) {
  return new Promise(function(resolve) {
    var fallbackToSync = function() {
      resolve((0, import_getBoundingClientRect.getBoundingClientRect)(element));
    }, tm = setTimeout(fallbackToSync, 10), observer = new IntersectionObserver(function(entries, ob) {
      var _entries_;
      clearTimeout(tm), ob.disconnect(), resolve((_entries_ = entries[0]) === null || _entries_ === void 0 ? void 0 : _entries_.boundingClientRect);
    }, {
      threshold: 1e-4
    });
    observer.observe(element);
  });
};
function useElementLayout(ref, onLayout) {
  (0, import_constants.useIsomorphicLayoutEffect)(function() {
    if (!(!resizeObserver || !onLayout)) {
      var node = ref.current;
      if (node)
        return LayoutHandlers.set(node, onLayout), resizeObserver.observe(node), function() {
          resizeObserver == null || resizeObserver.unobserve(node);
        };
    }
  }, [
    ref,
    onLayout
  ]);
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  measureLayout,
  useElementLayout
});
//# sourceMappingURL=useElementLayout.js.map
