var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
}, __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, "default"), secondTarget && __copyProps(secondTarget, mod, "default"));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var src_exports = {};
__export(src_exports, {
  Stack: () => Stack,
  Text: () => Text,
  View: () => View
});
module.exports = __toCommonJS(src_exports);
var import_react_native_use_responder_events = require("@tamagui/react-native-use-responder-events"), import_web = require("@tamagui/web"), import_react = require("react"), import_createOptimizedView = require("./createOptimizedView"), import_getBaseViews = require("./getBaseViews"), import_useElementLayout = require("./hooks/useElementLayout"), import_usePlatformMethods = require("./hooks/usePlatformMethods"), import_Pressability = require("./vendor/Pressability");
__reExport(src_exports, require("@tamagui/web"), module.exports);
__reExport(src_exports, require("./reactNativeTypes"), module.exports);
const baseViews = (0, import_getBaseViews.getBaseViews)();
(0, import_web.setupHooks)({
  getBaseViews: import_getBaseViews.getBaseViews,
  usePropsTransform(elementType, propsIn, stateRef, willHydrate) {
    {
      const isDOM = typeof elementType == "string", {
        // event props
        onMoveShouldSetResponder,
        onMoveShouldSetResponderCapture,
        onResponderEnd,
        onResponderGrant,
        onResponderMove,
        onResponderReject,
        onResponderRelease,
        onResponderStart,
        onResponderTerminate,
        onResponderTerminationRequest,
        onScrollShouldSetResponder,
        onScrollShouldSetResponderCapture,
        onSelectionChangeShouldSetResponder,
        onSelectionChangeShouldSetResponderCapture,
        onStartShouldSetResponder,
        onStartShouldSetResponderCapture,
        // android
        collapsable,
        focusable,
        // deprecated,
        accessible,
        accessibilityDisabled,
        onLayout,
        hrefAttrs,
        ...plainDOMProps
      } = propsIn;
      if (willHydrate || isDOM) {
        const hostRef = (0, import_react.useMemo)(
          () => ({
            get current() {
              return stateRef.current.host;
            }
          }),
          [stateRef]
        );
        (0, import_usePlatformMethods.usePlatformMethods)(hostRef), (0, import_useElementLayout.useElementLayout)(hostRef, isDOM ? onLayout : void 0), (0, import_react_native_use_responder_events.useResponderEvents)(
          hostRef,
          isDOM ? {
            onMoveShouldSetResponder,
            onMoveShouldSetResponderCapture,
            onResponderEnd,
            onResponderGrant,
            onResponderMove,
            onResponderReject,
            onResponderRelease,
            onResponderStart,
            onResponderTerminate,
            onResponderTerminationRequest,
            onScrollShouldSetResponder,
            onScrollShouldSetResponderCapture,
            onSelectionChangeShouldSetResponder,
            onSelectionChangeShouldSetResponderCapture,
            onStartShouldSetResponder,
            onStartShouldSetResponderCapture
          } : void 0
        );
      }
      if (isDOM) {
        if (plainDOMProps.href && hrefAttrs) {
          const { download, rel, target } = hrefAttrs;
          download != null && (plainDOMProps.download = download), rel && (plainDOMProps.rel = rel), typeof target == "string" && (plainDOMProps.target = target.charAt(0) !== "_" ? `_${target}` : target);
        }
        return plainDOMProps;
      }
    }
  },
  useEvents(viewProps, events, { pseudos }, setStateShallow, staticConfig) {
  }
});
const View = import_web.View, Stack = import_web.Stack, Text = import_web.Text;
//# sourceMappingURL=index.js.map
